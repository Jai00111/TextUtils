{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jai Bisht\\\\OneDrive\\\\Desktop\\\\babel\\\\Parcel\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport Navbar from \"./component/Navbar\";\n// import About from \"./component/About\";\nimport TextForm from \"./component/TextForm\";\nimport React, { useState } from 'react';\nimport Alert from \"./component/Alert\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mode, setMode] = useState('dark'); // whether dark mode is enabled or not\n\n  const [alert, setAlert] = useState({\n    type: type,\n    msg: 'message'\n  });\n  const showAlert = (type, message) => {\n    setAlert({\n      type: success,\n      msg: `${mode} is enabled`\n    });\n  };\n  if (mode === 'dark') {\n    document.body.style.backgroundColor = \"#0e3243\";\n    document.body.style.color = 'white';\n  } else {\n    document.body.style.backgroundColor = 'white';\n    document.body.style.color = 'black';\n  }\n  const toggleMode = () => {\n    if (mode === 'dark') {\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      showAlert(type, msg);\n    } else {\n      setMode('dark');\n      document.body.style.backgroundColor = '#0e3243';\n      showAlert(type, msg);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      title: \"TextUtil2\",\n      mode: mode,\n      toggleMode: toggleMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      alert: {\n        type: 'success',\n        msg: `${mode} has been enabled`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container my-3\",\n      children: /*#__PURE__*/_jsxDEV(TextForm, {\n        heading: \"Enter the text to analyze\",\n        mode: mode,\n        toggleMode: toggleMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"sgShrZL77+G6uEKtGnPovUem5Ik=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Navbar","TextForm","React","useState","Alert","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mode","setMode","alert","setAlert","type","msg","showAlert","message","success","document","body","style","backgroundColor","color","toggleMode","children","title","fileName","_jsxFileName","lineNumber","columnNumber","className","heading","_c","$RefreshReg$"],"sources":["C:/Users/Jai Bisht/OneDrive/Desktop/babel/Parcel/my-app/src/App.js"],"sourcesContent":["\nimport Navbar from \"./component/Navbar\";\n// import About from \"./component/About\";\nimport TextForm from \"./component/TextForm\";\nimport React, {useState} from 'react';\nimport Alert  from \"./component/Alert\";\n\n\n\nfunction App() {\n  \n  \n  const [mode,setMode]=useState('dark');// whether dark mode is enabled or not\n\n  const [alert, setAlert]=useState({type:type, msg:'message'})\n  const showAlert=(type,message)=>{\n    setAlert({type:success, msg:`${mode} is enabled`})\n  }\n\n  if(mode ==='dark'){\n    document.body.style.backgroundColor=\"#0e3243\";\n    document.body.style.color='white';\n    }else\n    {\n    document.body.style.backgroundColor='white';\n    document.body.style.color='black';\n  }\n  const toggleMode=()=>{\n    if(mode ==='dark'){\n      setMode('light');\n      document.body.style.backgroundColor=\"white\";\n      showAlert(type,msg);\n      }else\n      {\n      setMode('dark');\n      document.body.style.backgroundColor='#0e3243';\n      showAlert(type,msg);\n      \n    }\n  }\n  \n  return (\n  <> \n  <Navbar title=\"TextUtil2\" mode={mode} toggleMode={toggleMode}/>\n  <Alert alert={{type: 'success', msg: `${mode} has been enabled` }}/>\n  <div className=\"container my-3\" >\n  <TextForm heading=\"Enter the text to analyze\" mode={mode} toggleMode={toggleMode} />\n  </div>\n  </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AACA,OAAOA,MAAM,MAAM,oBAAoB;AACvC;AACA,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAOC,KAAK,MAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAIvC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAGb,MAAM,CAACC,IAAI,EAACC,OAAO,CAAC,GAACT,QAAQ,CAAC,MAAM,CAAC,CAAC;;EAEtC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAACX,QAAQ,CAAC;IAACY,IAAI,EAACA,IAAI;IAAEC,GAAG,EAAC;EAAS,CAAC,CAAC;EAC5D,MAAMC,SAAS,GAACA,CAACF,IAAI,EAACG,OAAO,KAAG;IAC9BJ,QAAQ,CAAC;MAACC,IAAI,EAACI,OAAO;MAAEH,GAAG,EAAC,GAAGL,IAAI;IAAa,CAAC,CAAC;EACpD,CAAC;EAED,IAAGA,IAAI,KAAI,MAAM,EAAC;IAChBS,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAC,SAAS;IAC7CH,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACE,KAAK,GAAC,OAAO;EACjC,CAAC,MACD;IACAJ,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAC,OAAO;IAC3CH,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACE,KAAK,GAAC,OAAO;EACnC;EACA,MAAMC,UAAU,GAACA,CAAA,KAAI;IACnB,IAAGd,IAAI,KAAI,MAAM,EAAC;MAChBC,OAAO,CAAC,OAAO,CAAC;MAChBQ,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAC,OAAO;MAC3CN,SAAS,CAACF,IAAI,EAACC,GAAG,CAAC;IACnB,CAAC,MACD;MACAJ,OAAO,CAAC,MAAM,CAAC;MACfQ,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAC,SAAS;MAC7CN,SAAS,CAACF,IAAI,EAACC,GAAG,CAAC;IAErB;EACF,CAAC;EAED,oBACAV,OAAA,CAAAE,SAAA;IAAAkB,QAAA,gBACApB,OAAA,CAACN,MAAM;MAAC2B,KAAK,EAAC,WAAW;MAAChB,IAAI,EAAEA,IAAK;MAACc,UAAU,EAAEA;IAAW;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAC/DzB,OAAA,CAACF,KAAK;MAACS,KAAK,EAAE;QAACE,IAAI,EAAE,SAAS;QAAEC,GAAG,EAAE,GAAGL,IAAI;MAAoB;IAAE;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACpEzB,OAAA;MAAK0B,SAAS,EAAC,gBAAgB;MAAAN,QAAA,eAC/BpB,OAAA,CAACL,QAAQ;QAACgC,OAAO,EAAC,2BAA2B;QAACtB,IAAI,EAAEA,IAAK;QAACc,UAAU,EAAEA;MAAW;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/E,CAAC;EAAA,eACJ,CAAC;AAEL;AAACrB,EAAA,CAzCQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AA2CZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}